{
    "patches": [
        {
            "label": "2025-09-23_14-12-28",
            "content": "@@ -1490,9 +1490,8 @@\n passo 1%0A\n-%0A\n",
            "lines": "49"
        },
        {
            "label": "2025-09-23_14-17-38",
            "content": "@@ -747,19 +747,20 @@\n urn f%22Co\n+lo\n r:\n- \n %7Bself.co\n@@ -769,17 +769,13 @@\n r%7D, \n-Tamanho: \n+Size:\n %7Bsel\n@@ -787,17 +787,12 @@\n e%7D, \n-Unidade: \n+Wet:\n %7Bsel\n@@ -983,34 +983,8 @@\n rio%0A\n-        print(%22$%22 + line)%0A\n     \n",
            "lines": "50"
        },
        {
            "label": "2025-09-23_14-24-59",
            "content": "@@ -1131,162 +1131,8 @@\n eak%0A\n-        %0A        elif args%5B0%5D == %22seca%22:%0A            print(%22sim%22 if towel.isDry() else %22nao%22)%0A            %0A        elif args%5B0%5D == %22torcer%22:%0A            %0A\n     \n",
            "lines": "51"
        },
        {
            "label": "2025-10-03_20-04-46",
            "content": "@@ -686,25 +686,16 @@\n  return%0A\n-    %0A    \n %0A    def\n@@ -815,137 +815,8 @@\n s%7D%22%0A\n-    %0A    def isDry(self):%0A        if self.wetness == 0 :%0A            return True%0A        else :%0A            return False%0A        \n %0Adef\n",
            "lines": "57"
        },
        {
            "label": "2025-10-04_15-34-02",
            "content": "@@ -1422,24 +1422,8 @@\n     \n-towel.wringOut()\n %0A   \n@@ -1444,21 +1444,19 @@\n %5B0%5D == %22\n-criar\n+new\n %22: # col\n@@ -1696,15 +1696,12 @@\n == %22\n-mostrar\n+show\n %22:%0A \n",
            "lines": "64"
        },
        {
            "label": "2025-10-04_15-51-01",
            "content": "@@ -796,17 +796,17 @@\n size%7D, U\n-m\n+n\n idade: %7B\n",
            "lines": "64"
        },
        {
            "label": "2025-10-04_15-52-25",
            "content": "@@ -1278,171 +1278,8 @@\n    %0A\n-        elif args%5B0%5D == %22criar%22: # color size%0A            color: str = args%5B1%5D%0A            size: str = args%5B2%5D%0A            towel = Towel(color, size)%0A            %0A\n     \n@@ -1435,32 +1435,173 @@\n ngOut()%0A        \n+elif args%5B0%5D == %22criar%22: # color size%0A            color: str = args%5B1%5D%0A            size: str = args%5B2%5D%0A            towel = Towel(color, size)\n %0A        elif ar\n",
            "lines": "64"
        },
        {
            "label": "2025-10-04_16-05-17",
            "content": "@@ -1170,16 +1170,19 @@\n s: list%5B\n+str\n %5D = line\n@@ -1188,16 +1188,19 @@\n e.split(\n+%22 %22\n ) # 5: s\n",
            "lines": "66"
        },
        {
            "label": "2025-10-04_16-09-55",
            "content": "@@ -1170,19 +1170,16 @@\n s: list%5B\n-str\n %5D = line\n@@ -1185,18 +1185,16 @@\n e.split(\n-%22%22\n ) # 5: s\n",
            "lines": "66"
        },
        {
            "label": "2025-10-04_16-10-56",
            "content": "@@ -1189,17 +1189,16 @@\n .split(%22\n- \n %22) # 5: \n",
            "lines": "66"
        },
        {
            "label": "2025-10-05_05-11-10",
            "content": "@@ -1428,68 +1428,8 @@\n ze)%0A\n-        elif args%5B0%5D == %22mostrar%22:%0A            print(towel)%0A\n     \n@@ -1707,32 +1707,83 @@\n amount)%0A        \n+elif args%5B0%5D == %22mostrar%22:%0A            print(towel)\n %0A        else: #\n",
            "lines": "66"
        },
        {
            "label": "2025-10-05_05-13-04",
            "content": "class Towel:\n    def __init__(self, color: str, size: str): # construtor\n        self.color: str = color # atributos\n        self.size: str = size\n        self.wetness: int = 0\n    \n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.isMaxWetness():\n            self.wetness = self.isMaxWetness()\n            print(\"toalha saturada, ensopada, pingando\")\n\n    def wringOut(self):\n        self.wetness = 0\n\n    def isMaxWetness(self) -> int:\n        if self.size == \"P\": # early return\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0 # default return\n    \n    \n    def __str__(self) -> str: # toString\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n    \n    def isDry(self):\n        if self.wetness == 0 :\n            return True\n        else :\n            return False\n        \ndef main(): \n    towel: Towel = Towel(\"\", \"\") # 2: criar um obj com qq valor inicial\n    while True: # 3: loop infinito\n\n        line: str = input() # 4: perguntar ao usuario\n        print(\"$\" + line)\n        args: list[str] = line.split(\" \") # 5: separar argumentos\n\n        if args[0] == \"end\":\n            break\n        \n        elif args[0] == \"criar\": # color size\n            color: str = args[1]\n            size: str = args[2]\n            towel = Towel(color, size)\n        elif args[0] == \"mostrar\":\n            print(towel)\n            \n        elif args[0] == \"seca\":\n            print(\"sim\" if towel.isDry() else \"nao\")\n            \n        elif args[0] == \"torcer\":\n            towel.wringOut()\n        \n        elif args[0] == \"dry\":\n            amount: int = int(args[1])\n            towel.dry(amount)\n        \n        else: # 7: erro\n            print(\"fail: comando n\u00e3o encontrado\")\n\nmain() # passo 1\n\n",
            "lines": "67"
        }
    ]
}